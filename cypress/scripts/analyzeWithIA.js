// Importa o 'fetch' do Node.js para fazer requisi√ß√µes HTTP
import fetch from 'node-fetch';

// Importa o dotenv para carregar as vari√°veis de ambiente do arquivo .env
import * as dotenv from 'dotenv';

// Carrega as vari√°veis de ambiente do arquivo .env para o processo atual
dotenv.config();

// Exporta uma fun√ß√£o ass√≠ncrona para an√°lise da falha usando IA
export async function analyzeErrorWithIA(errorText, testTitle) {
  // Recupera as vari√°veis de ambiente necess√°rias
  const API_KEY = process.env.IA_API_KEY;
  const API_URL = process.env.IA_API_URL;
  const MODEL = process.env.IA_MODEL;

  // Verifica se as vari√°veis est√£o definidas corretamente
  if (!API_KEY || !API_URL || !MODEL) {
    console.warn("‚ö†Ô∏è Vari√°veis de ambiente da IA n√£o configuradas corretamente.");
    return "‚ùå Erro ao se comunicar com a IA: Vari√°veis de ambiente n√£o definidas.";
  }

  try {
    // Monta a requisi√ß√£o para a IA com o modelo e contexto
    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: MODEL,
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um analista de QA s√™nior que ajuda times a entenderem falhas automatizadas de testes E2E. Sua resposta deve conter t√≠tulo visual com emoji e uma explica√ß√£o estruturada."
          },
          {
            role: "user",
            content: `Explique tecnicamente o seguinte erro de teste e organize em t√≥picos:\n\nüß™ T√≠tulo: ${testTitle}\n\n‚ùóErro capturado:\n${errorText}`
          }
        ]
      })
    });

    // Transforma a resposta em JSON
    const data = await response.json();

    // Se a IA retornou uma explica√ß√£o v√°lida
    if (data?.choices?.[0]?.message?.content) {
      const explanation = data.choices[0].message.content.trim();

      // Verifica e adiciona emojis conforme o tipo de erro para deixar bonito
      if (errorText.includes("Timeout")) {
        return `‚è±Ô∏è **Erro de Timeout**\n\n${explanation}`;
      }

      if (errorText.includes("not found") || errorText.includes("Cannot find") || errorText.includes("never found")) {
        return `üîç **Elemento n√£o encontrado no DOM**\n\n${explanation}`;
      }

      if (errorText.includes("network") || errorText.includes("ECONNREFUSED")) {
        return `üåê **Erro de Rede/API**\n\n${explanation}`;
      }

      // Resposta padr√£o formatada
      return `ü§ñ **An√°lise da IA**\n\n${explanation}`;
    }

    // Se n√£o veio uma resposta v√°lida da IA
    return "‚ö†Ô∏è Erro: resposta inesperada da IA.";
  } catch (err) {
    // Em caso de erro na requisi√ß√£o
    console.error("‚ùå Erro ao chamar IA:", err.message);
    return "üö® Erro inesperado ao tentar se comunicar com a IA.";
  }
}
